'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            },
          };
        }
        Object.defineProperty(o, k2, desc);
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', { enumerable: true, value: v });
      }
    : function (o, v) {
        o['default'] = v;
      });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.VisualizationMsg = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = __importStar(require('flatbuffers'));
const msg_metadata_js_1 = require('../../fb/msg-metadata.cjs');
const colored_arc2_d_js_1 = require('../../fb/amrl-msgs/colored-arc2-d.cjs');
const colored_line2_d_js_1 = require('../../fb/amrl-msgs/colored-line2-d.cjs');
const colored_point2_d_js_1 = require('../../fb/amrl-msgs/colored-point2-d.cjs');
const path_visualization_js_1 = require('../../fb/amrl-msgs/path-visualization.cjs');
const pose2_df_js_1 = require('../../fb/amrl-msgs/pose2-df.cjs');
const header_js_1 = require('../../fb/std-msgs/header.cjs');
class VisualizationMsg {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }
  static getRootAsVisualizationMsg(bb, obj) {
    return (obj || new VisualizationMsg()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }
  static getSizePrefixedRootAsVisualizationMsg(bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new VisualizationMsg()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }
  _Metadata(obj) {
    const offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new msg_metadata_js_1.MsgMetadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  }
  header(obj) {
    const offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? (obj || new header_js_1.Header()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
  }
  ns(optionalEncoding) {
    const offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
  }
  particles(index, obj) {
    const offset = this.bb.__offset(this.bb_pos, 10);
    return offset
      ? (obj || new pose2_df_js_1.Pose2Df()).__init(
          this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4),
          this.bb
        )
      : null;
  }
  particlesLength() {
    const offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  }
  pathOptions(index, obj) {
    const offset = this.bb.__offset(this.bb_pos, 12);
    return offset
      ? (obj || new path_visualization_js_1.PathVisualization()).__init(
          this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4),
          this.bb
        )
      : null;
  }
  pathOptionsLength() {
    const offset = this.bb.__offset(this.bb_pos, 12);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  }
  points(index, obj) {
    const offset = this.bb.__offset(this.bb_pos, 14);
    return offset
      ? (obj || new colored_point2_d_js_1.ColoredPoint2D()).__init(
          this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4),
          this.bb
        )
      : null;
  }
  pointsLength() {
    const offset = this.bb.__offset(this.bb_pos, 14);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  }
  lines(index, obj) {
    const offset = this.bb.__offset(this.bb_pos, 16);
    return offset
      ? (obj || new colored_line2_d_js_1.ColoredLine2D()).__init(
          this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4),
          this.bb
        )
      : null;
  }
  linesLength() {
    const offset = this.bb.__offset(this.bb_pos, 16);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  }
  arcs(index, obj) {
    const offset = this.bb.__offset(this.bb_pos, 18);
    return offset
      ? (obj || new colored_arc2_d_js_1.ColoredArc2D()).__init(
          this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4),
          this.bb
        )
      : null;
  }
  arcsLength() {
    const offset = this.bb.__offset(this.bb_pos, 18);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  }
  static startVisualizationMsg(builder) {
    builder.startObject(8);
  }
  static add_Metadata(builder, _MetadataOffset) {
    builder.addFieldOffset(0, _MetadataOffset, 0);
  }
  static addHeader(builder, headerOffset) {
    builder.addFieldOffset(1, headerOffset, 0);
  }
  static addNs(builder, nsOffset) {
    builder.addFieldOffset(2, nsOffset, 0);
  }
  static addParticles(builder, particlesOffset) {
    builder.addFieldOffset(3, particlesOffset, 0);
  }
  static createParticlesVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]);
    }
    return builder.endVector();
  }
  static startParticlesVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static addPathOptions(builder, pathOptionsOffset) {
    builder.addFieldOffset(4, pathOptionsOffset, 0);
  }
  static createPathOptionsVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]);
    }
    return builder.endVector();
  }
  static startPathOptionsVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static addPoints(builder, pointsOffset) {
    builder.addFieldOffset(5, pointsOffset, 0);
  }
  static createPointsVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]);
    }
    return builder.endVector();
  }
  static startPointsVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static addLines(builder, linesOffset) {
    builder.addFieldOffset(6, linesOffset, 0);
  }
  static createLinesVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]);
    }
    return builder.endVector();
  }
  static startLinesVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static addArcs(builder, arcsOffset) {
    builder.addFieldOffset(7, arcsOffset, 0);
  }
  static createArcsVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]);
    }
    return builder.endVector();
  }
  static startArcsVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static endVisualizationMsg(builder) {
    const offset = builder.endObject();
    builder.requiredField(offset, 6); // header
    builder.requiredField(offset, 8); // ns
    builder.requiredField(offset, 10); // particles
    builder.requiredField(offset, 12); // path_options
    builder.requiredField(offset, 14); // points
    builder.requiredField(offset, 16); // lines
    builder.requiredField(offset, 18); // arcs
    return offset;
  }
}
exports.VisualizationMsg = VisualizationMsg;
