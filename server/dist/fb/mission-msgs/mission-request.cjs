'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, '__esModule', { value: true });
exports.MissionRequest = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require('flatbuffers');
var msg_metadata_js_1 = require('../../fb/msg-metadata.cjs');
var nav_sat_fix_js_1 = require('../../fb/sensor-msgs/nav-sat-fix.cjs');
var MissionRequest = /** @class */ (function () {
  function MissionRequest() {
    this.bb = null;
    this.bb_pos = 0;
  }
  MissionRequest.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  MissionRequest.getRootAsMissionRequest = function (bb, obj) {
    return (obj || new MissionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  MissionRequest.getSizePrefixedRootAsMissionRequest = function (bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new MissionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  MissionRequest.prototype._Metadata = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new msg_metadata_js_1.MsgMetadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  };
  MissionRequest.prototype.uavId = function (optionalEncoding) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
  };
  MissionRequest.prototype.missionId = function (optionalEncoding) {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
  };
  MissionRequest.prototype.missionType = function () {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
  };
  MissionRequest.prototype.waypoint = function (index, obj) {
    var offset = this.bb.__offset(this.bb_pos, 12);
    return offset
      ? (obj || new nav_sat_fix_js_1.NavSatFix()).__init(
          this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4),
          this.bb
        )
      : null;
  };
  MissionRequest.prototype.waypointLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 12);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  MissionRequest.prototype.radius = function () {
    var offset = this.bb.__offset(this.bb_pos, 14);
    return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
  };
  MissionRequest.prototype.maxVel = function () {
    var offset = this.bb.__offset(this.bb_pos, 16);
    return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
  };
  MissionRequest.prototype.idleVel = function () {
    var offset = this.bb.__offset(this.bb_pos, 18);
    return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
  };
  MissionRequest.prototype.yaw = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 20);
    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  };
  MissionRequest.prototype.yawLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 20);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  MissionRequest.prototype.yawArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 20);
    return offset
      ? new Float32Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  MissionRequest.prototype.gimbalPitch = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 22);
    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  };
  MissionRequest.prototype.gimbalPitchLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 22);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  MissionRequest.prototype.gimbalPitchArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 22);
    return offset
      ? new Float32Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  MissionRequest.prototype.speed = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 24);
    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  };
  MissionRequest.prototype.speedLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 24);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  MissionRequest.prototype.speedArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 24);
    return offset
      ? new Float32Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  MissionRequest.prototype.yawMode = function () {
    var offset = this.bb.__offset(this.bb_pos, 26);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
  };
  MissionRequest.prototype.traceMode = function () {
    var offset = this.bb.__offset(this.bb_pos, 28);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
  };
  MissionRequest.prototype.gimbalPitchMode = function () {
    var offset = this.bb.__offset(this.bb_pos, 30);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
  };
  MissionRequest.prototype.finishAction = function () {
    var offset = this.bb.__offset(this.bb_pos, 32);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
  };
  MissionRequest.prototype.commandList = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 34);
    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  };
  MissionRequest.prototype.commandListLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 34);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  MissionRequest.prototype.commandListArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 34);
    return offset
      ? new Float32Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  MissionRequest.prototype.commandParameter = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 36);
    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  };
  MissionRequest.prototype.commandParameterLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 36);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  MissionRequest.prototype.commandParameterArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 36);
    return offset
      ? new Float32Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  MissionRequest.startMissionRequest = function (builder) {
    builder.startObject(17);
  };
  MissionRequest.add_Metadata = function (builder, _MetadataOffset) {
    builder.addFieldOffset(0, _MetadataOffset, 0);
  };
  MissionRequest.addUavId = function (builder, uavIdOffset) {
    builder.addFieldOffset(1, uavIdOffset, 0);
  };
  MissionRequest.addMissionId = function (builder, missionIdOffset) {
    builder.addFieldOffset(2, missionIdOffset, 0);
  };
  MissionRequest.addMissionType = function (builder, missionType) {
    builder.addFieldInt32(3, missionType, 0);
  };
  MissionRequest.addWaypoint = function (builder, waypointOffset) {
    builder.addFieldOffset(4, waypointOffset, 0);
  };
  MissionRequest.createWaypointVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]);
    }
    return builder.endVector();
  };
  MissionRequest.startWaypointVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  MissionRequest.addRadius = function (builder, radius) {
    builder.addFieldFloat64(5, radius, 0.0);
  };
  MissionRequest.addMaxVel = function (builder, maxVel) {
    builder.addFieldFloat64(6, maxVel, 0.0);
  };
  MissionRequest.addIdleVel = function (builder, idleVel) {
    builder.addFieldFloat64(7, idleVel, 0.0);
  };
  MissionRequest.addYaw = function (builder, yawOffset) {
    builder.addFieldOffset(8, yawOffset, 0);
  };
  MissionRequest.createYawVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]);
    }
    return builder.endVector();
  };
  MissionRequest.startYawVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  MissionRequest.addGimbalPitch = function (builder, gimbalPitchOffset) {
    builder.addFieldOffset(9, gimbalPitchOffset, 0);
  };
  MissionRequest.createGimbalPitchVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]);
    }
    return builder.endVector();
  };
  MissionRequest.startGimbalPitchVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  MissionRequest.addSpeed = function (builder, speedOffset) {
    builder.addFieldOffset(10, speedOffset, 0);
  };
  MissionRequest.createSpeedVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]);
    }
    return builder.endVector();
  };
  MissionRequest.startSpeedVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  MissionRequest.addYawMode = function (builder, yawMode) {
    builder.addFieldInt32(11, yawMode, 0);
  };
  MissionRequest.addTraceMode = function (builder, traceMode) {
    builder.addFieldInt32(12, traceMode, 0);
  };
  MissionRequest.addGimbalPitchMode = function (builder, gimbalPitchMode) {
    builder.addFieldInt32(13, gimbalPitchMode, 0);
  };
  MissionRequest.addFinishAction = function (builder, finishAction) {
    builder.addFieldInt32(14, finishAction, 0);
  };
  MissionRequest.addCommandList = function (builder, commandListOffset) {
    builder.addFieldOffset(15, commandListOffset, 0);
  };
  MissionRequest.createCommandListVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]);
    }
    return builder.endVector();
  };
  MissionRequest.startCommandListVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  MissionRequest.addCommandParameter = function (builder, commandParameterOffset) {
    builder.addFieldOffset(16, commandParameterOffset, 0);
  };
  MissionRequest.createCommandParameterVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]);
    }
    return builder.endVector();
  };
  MissionRequest.startCommandParameterVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  MissionRequest.endMissionRequest = function (builder) {
    var offset = builder.endObject();
    return offset;
  };
  MissionRequest.createMissionRequest = function (
    builder,
    _MetadataOffset,
    uavIdOffset,
    missionIdOffset,
    missionType,
    waypointOffset,
    radius,
    maxVel,
    idleVel,
    yawOffset,
    gimbalPitchOffset,
    speedOffset,
    yawMode,
    traceMode,
    gimbalPitchMode,
    finishAction,
    commandListOffset,
    commandParameterOffset
  ) {
    MissionRequest.startMissionRequest(builder);
    MissionRequest.add_Metadata(builder, _MetadataOffset);
    MissionRequest.addUavId(builder, uavIdOffset);
    MissionRequest.addMissionId(builder, missionIdOffset);
    MissionRequest.addMissionType(builder, missionType);
    MissionRequest.addWaypoint(builder, waypointOffset);
    MissionRequest.addRadius(builder, radius);
    MissionRequest.addMaxVel(builder, maxVel);
    MissionRequest.addIdleVel(builder, idleVel);
    MissionRequest.addYaw(builder, yawOffset);
    MissionRequest.addGimbalPitch(builder, gimbalPitchOffset);
    MissionRequest.addSpeed(builder, speedOffset);
    MissionRequest.addYawMode(builder, yawMode);
    MissionRequest.addTraceMode(builder, traceMode);
    MissionRequest.addGimbalPitchMode(builder, gimbalPitchMode);
    MissionRequest.addFinishAction(builder, finishAction);
    MissionRequest.addCommandList(builder, commandListOffset);
    MissionRequest.addCommandParameter(builder, commandParameterOffset);
    return MissionRequest.endMissionRequest(builder);
  };
  return MissionRequest;
})();
exports.MissionRequest = MissionRequest;
